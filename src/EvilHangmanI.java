
public interface EvilHangmanI {

		/**load content of dictionary from txt file  
		 * @return number of words in the dictionary
		 */
		int loadWordFromDict();
		//calculate number of words of specific length
		/**
		 * @param compare the word with the length set by the constructor 
		 * @return true if length is the same, else false
		 */
		boolean wordWithSameLength(String S);
		/** put the word into the array return nothing
		 * 
		 */
		void addWordWithSameLengthToList();
		/**
		 * @param find the pattern with character e in the word list with length
		 * and put unique pattern into list
		 */
		void findPattern(char e);
		/**
		 * @param word s in the dictionary 
		 * @param guess character e
		 * @return dash word only reveal character e with recursive method
		 */
		String padDashWord(String s, char e);
		/**
		 * @param check string s existed in the pattern list or not
		 * @return true if string exists, else false
		 */
		boolean existInPattern(String s);
		/**
		 * @param reduce words list matching to the pattern having largest family 
		 */
		void updateMatchList(char e);
		/**
		 * @param use the pattern arraylist generated by character e and calculate the number of matching words correspond to each pattern,
		 * and put the number into the size arraylist
		 */
		void getFamilySize(char e);
		/**
		 * @param s pattern
		 * @param e guess character
		 * @return number of words in the matchlist matching the pattern 
		 */
		int sameNumPattern(String s, char e);
		/**
		 * @param s1 pattern
		 * @param s2 word
		 * @param e guess character
		 * @return true if the word match the pattern and guess character by traversing the word
		 */
		boolean samePatternWord(String s1, String s2, char e);
		/**
		 * @return index of pattern having biggest by traversing the size list
		 */
		int indexOfBiggestFamily();
		/**
		 * @param s new pattern 
		 * @param e guess character
		 * use newpattern and guess character to traverse the wordlist and put them in the list
		 */
		void matchWordListAdd(String s, char e);
		/**
		 * @param oldPa old pattern
		 * @param word word in the dictionary
		 * @param e
		 * @return newpattern generated by the old pattern and word, and character e
		 */
		String updatePattern(String oldPa, String word, char e);
		/**
		 * @return true if the pattern having biggest family turns into words without any dash
		 */
		boolean isGameWon();
		/**
		 * initialize first pattern "____" with same length user set to play the game
		 */
		void ini_most();
		/**
		 * @param len the length of word user set to play the game
		 * @return true if length is bigger than 0 and smaller than 30, throw exeception when user put 26 27 in the function
		 * @throws IllegalAccessException 
		 */
		boolean validLen(int len) throws IllegalArgumentException;
		/**
		 * @param String in 
		 * @return true if in  have length only equal to 1 and has to be character
		 */
		boolean validGuess(String in);
		
		/**
		 * @param word s 
		 * @param character e 
		 * @return number of character e occurring in the word
		 */
		int numOfLetterInAWord(String word, char e);		
		
}
